

Definition test_prop_InsertPost    :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (k': nat)  =>
  forAll arbitrary (fun (v: nat) =>
  prop_InsertPost t k k' v))))
.


Definition test_prop_InsertValid   :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (v: nat) =>
  prop_InsertValid t k v)))
.


Definition test_prop_DeleteValid   :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat) =>
  prop_DeleteValid t k))
.



Definition test_prop_UnionValid    :=
  forAll bespoke (fun (t1: Tree)  =>
  forAll bespoke (fun (t2: Tree) =>
  prop_UnionValid t1 t2))
.


Definition test_prop_InsertPost    :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (k': nat)  =>
  forAll arbitrary (fun (v: nat) =>
  prop_InsertPost t k k' v))))
.


Definition test_prop_DeletePost    :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (k': nat) =>
  prop_DeletePost t k k')))
.


Definition test_prop_UnionPost   :=
  forAll bespoke (fun (t: Tree)  =>
  forAll bespoke (fun (t': Tree)  =>
  forAll arbitrary (fun (k: nat) =>
  prop_UnionPost t t' k)))
.


Definition test_prop_InsertModel   :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (v: nat) =>
  prop_InsertModel t k v)))
.


Definition test_prop_DeleteModel   :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat) =>
  prop_DeleteModel t k))
.


Definition test_prop_UnionModel    :=
  forAll bespoke (fun (t: Tree)  =>
  forAll bespoke (fun (t': Tree) =>
  prop_UnionModel t t'))
.


Definition test_prop_InsertInsert    :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (k': nat)  =>
  forAll arbitrary (fun (v: nat)  =>
  forAll arbitrary (fun (v': nat) =>
  prop_InsertInsert t k k' v v')))))
.


Definition test_prop_InsertDelete    :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (k': nat)  =>
  forAll arbitrary (fun (v: nat) =>
  prop_InsertDelete t k k' v))))
.


Definition test_prop_InsertUnion   :=
  forAll bespoke (fun (t: Tree)  =>
  forAll bespoke (fun (t': Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (v: nat) =>
  prop_InsertUnion t t' k v))))
.


Definition test_prop_DeleteInsert    :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (k': nat)  =>
  forAll arbitrary (fun (v': nat) =>
  prop_DeleteInsert t k k' v'))))
.


Definition test_prop_DeleteDelete    :=
  forAll bespoke (fun (t: Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (k': nat) =>
  (prop_DeleteDelete t k k'))))
.


Definition test_prop_DeleteUnion   :=
  forAll bespoke (fun (t: Tree)  =>
  forAll bespoke (fun (t': Tree)  =>
  forAll arbitrary (fun (k: nat) =>
  prop_DeleteUnion t t' k)))
.


Definition test_prop_UnionDeleteInsert   :=
  forAll bespoke (fun (t :Tree)  =>
  forAll bespoke (fun (t': Tree)  =>
  forAll arbitrary (fun (k: nat)  =>
  forAll arbitrary (fun (v: nat) =>
  (prop_UnionDeleteInsert t t' k v)))))
.


Definition test_prop_UnionUnionIdem    :=
  forAll bespoke (fun (t: Tree) =>
  prop_UnionUnionIdem t)
.


Definition test_prop_UnionUnionAssoc   :=
  forAll bespoke (fun (t1: Tree)  =>
  forAll bespoke (fun (t2: Tree)  =>
  forAll bespoke (fun (t3: Tree) =>
  prop_UnionUnionAssoc t1 t2 t3)))
.

